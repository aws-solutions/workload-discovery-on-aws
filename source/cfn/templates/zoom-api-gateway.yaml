AWSTemplateFormatVersion: '2010-09-09'

Description: AWS Perspective API Gateway Stack

Parameters:
  GremlinARN:
    Type: String
    Description: The ARN for the Gremlin Lambda.
  SearchFunctionArn:
    Type: String
    Description: The ARN for the Opensearch Lambda.
  DrawioLambdaARN:
    Type: String
    Description: The ARN of the Drawio Lambda function.

Resources:
  GatewayDrawioPermission:
    Type: AWS::Lambda::Permission
    Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W24
              reason: 'we only have invokeFunction specified...'
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Ref: DrawioLambdaARN
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${region}:${accountId}:${PerspectiveDrawioWebRestAPIId}/*
          - PerspectiveDrawioWebRestAPIId: '{{resolve:ssm:PerspectiveDrawioWebRestAPIId:1}}'
            region:
              Ref: AWS::Region
            accountId:
              Ref: AWS::AccountId

  GatewayGremlinPermission:
    Type: AWS::Lambda::Permission
    Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W24
              reason: 'we only have invokeFunction specified...'
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Ref: GremlinARN
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${region}:${accountId}:${PerspectiveWebRestAPIId}/*
          - PerspectiveWebRestAPIId: '{{resolve:ssm:PerspectiveWebRestAPIId:1}}'
            region:
              Ref: AWS::Region
            accountId:
              Ref: AWS::AccountId
              
  GatewayElasticPermission:
    Type: AWS::Lambda::Permission
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W24
            reason: 'we only have invokeFunction specified...'
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Ref: SearchFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${region}:${accountId}:${PerspectiveWebRestAPIId}/*
          - PerspectiveWebRestAPIId: '{{resolve:ssm:PerspectiveWebRestAPIId:1}}'
            region:
              Ref: AWS::Region
            accountId:
              Ref: AWS::AccountId

  ElasticResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: '{{resolve:ssm:PerspectiveWebRestAPIId:1}}'
      ParentId: '{{resolve:ssm:PerspectiveWebRestAPIRootResourceId:1}}'
      PathPart: search

  PerspectiveDrawioAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: PerspectiveDrawioAuthorizer
      RestApiId: '{{resolve:ssm:PerspectiveDrawioWebRestAPIId:1}}'
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - '{{resolve:ssm:PerspectiveCognitoUserPoolARN:1}}'
      Type: COGNITO_USER_POOLS

  PerspectiveAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: PerspectiveAuthorizer
      RestApiId: '{{resolve:ssm:PerspectiveWebRestAPIId:1}}'
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - '{{resolve:ssm:PerspectiveCognitoUserPoolARN:1}}'
      Type: COGNITO_USER_POOLS

  GremlinRequestGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: PerspectiveAuthorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GremlinARN}/invocations
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      ResourceId: '{{resolve:ssm:PerspectiveWebRestAPIResourceId:1}}'
      RestApiId: '{{resolve:ssm:PerspectiveWebRestAPIId:1}}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  GremlinRequestPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: PerspectiveAuthorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GremlinARN}/invocations
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      ResourceId: '{{resolve:ssm:PerspectiveWebRestAPIResourceId:1}}'
      RestApiId: '{{resolve:ssm:PerspectiveWebRestAPIId:1}}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  DrawioRequestGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: PerspectiveDrawioAuthorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DrawioLambdaARN}/invocations
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      ResourceId: '{{resolve:ssm:PerspectiveDrawioWebRestAPIResourceId:1}}'
      RestApiId: '{{resolve:ssm:PerspectiveDrawioWebRestAPIId:1}}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  DrawioRequestPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: PerspectiveDrawioAuthorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DrawioLambdaARN}/invocations
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      ResourceId: '{{resolve:ssm:PerspectiveDrawioWebRestAPIResourceId:1}}'
      RestApiId: '{{resolve:ssm:PerspectiveDrawioWebRestAPIId:1}}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ElasticRequestPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: PerspectiveAuthorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchFunctionArn}/invocations
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      ResourceId:
        Ref: ElasticResource
      RestApiId: '{{resolve:ssm:PerspectiveWebRestAPIId:1}}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ElasticResourceOptionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId:
        Ref: ElasticResource
      RestApiId: '{{resolve:ssm:PerspectiveWebRestAPIId:1}}'
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: PerspectiveAuthorizer
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

  GremlinPerspectiveApiDeployment:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W68
            reason: Looking into adding a usageplan
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - GremlinRequestGet
      - GremlinRequestPost
      - ElasticRequestPost
      # - SaveDiagramRequestAny
      # - SaveDiagramRequestIdAny
    Properties:
      RestApiId: '{{resolve:ssm:PerspectiveWebRestAPIId:1}}'
      StageName: Prod
      StageDescription:
        AccessLogSetting:
          DestinationArn: !Sub
            - arn:aws:logs:${region}:${accountId}:log-group:API-Gateway-Execution-Logs_${PerspectiveWebRestAPIId}/Prod
            - region: !Ref AWS::Region
              accountId: !Ref AWS::AccountId
              PerspectiveWebRestAPIId: '{{resolve:ssm:PerspectiveWebRestAPIId:1}}'
          Format: "{
            'requestId': '$context.requestId',
            'ip': '$context.identity.sourceIp',
            'caller': '$context.identity.caller',
            'user': '$context.identity.user',
            'requestTime': '$context.requestTime',
            'httpMethod': '$context.httpMethod',
            'resourcePath': '$context.resourcePath',
            'status': '$context.status',
            'protocol': '$context.protocol',
            'responseLength': '$context.responseLength',
            }"
  DrawioPerspectiveApiDeployment:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W68
            reason: Looking into adding a usageplan
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - DrawioRequestGet
      - DrawioRequestPost
    Properties:
      RestApiId: '{{resolve:ssm:PerspectiveDrawioWebRestAPIId:1}}'
      StageName: Prod
      StageDescription:
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: '*'
            LoggingLevel: INFO
            ResourcePath: /*
            MetricsEnabled: true
        AccessLogSetting:
          DestinationArn: !Sub
            - arn:aws:logs:${region}:${accountId}:log-group:API-Gateway-Execution-Logs_${PerspectiveDrawioWebRestAPIId}/Prod
            - region: !Ref AWS::Region
              accountId: !Ref AWS::AccountId
              PerspectiveDrawioWebRestAPIId: '{{resolve:ssm:PerspectiveDrawioWebRestAPIId:1}}'
          Format: "{
            'requestId': '$context.requestId',
            'ip': '$context.identity.sourceIp',
            'caller': '$context.identity.caller',
            'user': '$context.identity.user',
            'requestTime': '$context.requestTime',
            'httpMethod': '$context.httpMethod',
            'resourcePath': '$context.resourcePath',
            'status': '$context.status',
            'protocol': '$context.protocol',
            'responseLength': '$context.responseLength',
            }"

Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value:
      Fn::Sub:
        - https://${PerspectiveWebRestAPIId}.execute-api.${region}.amazonaws.com/Prod/
        - PerspectiveWebRestAPIId: '{{resolve:ssm:PerspectiveWebRestAPIId:1}}'
          region:
            Ref: AWS::Region
  DrawioRootUrl:
    Description: Root URL of the Drawio API gateway
    Value:
      Fn::Sub:
        - https://${PerspectiveWebRestAPIId}.execute-api.${region}.amazonaws.com/Prod/
        - PerspectiveWebRestAPIId: '{{resolve:ssm:PerspectiveDrawioWebRestAPIId:1}}'
          region:
            Ref: AWS::Region
