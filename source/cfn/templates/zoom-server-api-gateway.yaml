AWSTemplateFormatVersion: '2010-09-09'

Description: AWS Perspective API Gateway For Discovery Crawler Stack

Parameters:
  GremlinARN:
    Type: String
    Description: The ARN for the gremlin lambda.
  SearchFunctionArn:
    Type: String
    Description: The ARN for the elastic lambda.

Resources:

  ServerGatewayGremlinPermission:
    Type: AWS::Lambda::Permission
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W24
            reason: 'we only have invokeLambda defined'
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Ref: GremlinARN
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*
          - API: '{{resolve:ssm:ServerGremlinAPIId:1}}'
  ServerGatewayElasticPermission:
    Type: AWS::Lambda::Permission
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W24
            reason: 'we only have invokeLambda defined'
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Ref: SearchFunctionArn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${API}/*
          - API: '{{resolve:ssm:ServerGremlinAPIId:1}}'

  ServerGremlinResourceOptionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: '{{resolve:ssm:ServerGremlinAPIResourceId:1}}'
      RestApiId: '{{resolve:ssm:ServerGremlinAPIId:1}}'
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

  ServerGremlinRequestGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GremlinARN}/invocations
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
        RequestTemplates:
          application/json: |-
            {
               "command" : "$input.params('command')",
               "data":{
                    "id": "$input.params('id')",
                    "resourceType": "$input.params('resourceType')"
                 }
            }
      ResourceId: '{{resolve:ssm:ServerGremlinAPIResourceId:1}}'
      RestApiId: '{{resolve:ssm:ServerGremlinAPIId:1}}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  ServerGremlinRequestPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GremlinARN}/invocations
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      ResourceId: '{{resolve:ssm:ServerGremlinAPIResourceId:1}}'
      RestApiId: '{{resolve:ssm:ServerGremlinAPIId:1}}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ServerElasticRequestPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchFunctionArn}/invocations
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
      ResourceId: '{{resolve:ssm:ServerElasticAPIResourceId:1}}'
      RestApiId: '{{resolve:ssm:ServerGremlinAPIId:1}}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  ServerElasticResourceOptionMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ResourceId: '{{resolve:ssm:ServerElasticAPIResourceId:1}}'
      RestApiId: '{{resolve:ssm:ServerGremlinAPIId:1}}'
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'
  ServerGremlinZoomApiDeployment:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W68
            reason: Looking into adding a usageplan
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ServerGremlinRequestGet
      - ServerGremlinResourceOptionMethod
      - ServerGremlinRequestPost
    Properties:
      RestApiId: '{{resolve:ssm:ServerGremlinAPIId:1}}'
      StageName: Prod
      StageDescription:
        MethodSettings:
          - DataTraceEnabled: true
            HttpMethod: '*'
            LoggingLevel: INFO
            ResourcePath: /*
            MetricsEnabled: true
        AccessLogSetting:
          DestinationArn: !Sub
            - arn:aws:logs:${region}:${accountId}:log-group:API-Gateway-Execution-Logs_${ServerGremlinAPIId}/Prod
            - region: !Ref AWS::Region
              accountId: !Ref AWS::AccountId
              ServerGremlinAPIId: '{{resolve:ssm:ServerGremlinAPIId:1}}'
          Format: "{
            'requestId': '$context.requestId',
            'ip': '$context.identity.sourceIp',
            'caller': '$context.identity.caller',
            'user': '$context.identity.user',
            'requestTime': '$context.requestTime',
            'httpMethod': '$context.httpMethod',
            'resourcePath': '$context.resourcePath',
            'status': '$context.status',
            'protocol': '$context.protocol',
            'responseLength': '$context.responseLength',
            }"
Outputs:
  RootUrl:
    Description: Root URL of the API gateway
    Value:
      Fn::Sub:
          - https://${PerspectiveServerRestAPIId}.execute-api.${region}.amazonaws.com/Prod/
          - PerspectiveServerRestAPIId: 
              '{{resolve:ssm:ServerGremlinAPIId:1}}'
            region: 
              Ref: AWS::Region
