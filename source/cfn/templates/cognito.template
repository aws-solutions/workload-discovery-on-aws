AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: Workload Discovery on AWS Amazon Cognito Stack

Parameters:

  DeploymentBucket:
    Type: String

  DeploymentBucketKey:
    Type: String

  CognitoDomain:
    Type: String
    Description: The unique name that will be used to create the user domain. Must be alpha numeric 3-63 in length.
  AmplifyStorageBucket:
    Type: String
    Description: The bucket that will store saved maps
  AdminUserEmailAddress:
    Type: String
  WebUiUrl:
    Type: String

  PythonLambdaRuntime:
    Type: String

  LambdaPowertoolsPythonLayer:
    Type: String

  BotoUtils:
    Type: String
    Description: Required library

  CustomResourceHelper:
    Type: String
    Description: Required library

  UsesCustomIdentity: 
    Type: String
    AllowedValues:
      - 'No'
      - 'Yes'

  IdentityType: 
    Type: String

  AttributeMapping:
    Type: String

  ProviderName: 
    Type: String

  GoogleClientId:
    Type: String

  GoogleClientSecretArn:
    Type: String

  SAMLMetadataURL:
    Type: String

  OIDCClientId:
    Type: String

  OIDCClientSecretArn:
    Type: String

  OIDCIssuerURL: 
    Type: String

  OIDCAttributeRequestMethod:
    Type: String

  CloudfrontDistributionURL:
    Type: String
  
Conditions:
  CreateSAMLResources: !Equals [!Ref UsesCustomIdentity, 'Yes']
  CreateGoogleIdentity: !And
    - !Equals [!Ref UsesCustomIdentity, 'Yes']
    - !Equals [!Ref IdentityType, 'Google']
  CreateSAMLIdentity: !And
    - !Equals [!Ref UsesCustomIdentity, 'Yes']
    - !Equals [!Ref IdentityType, 'SAML']
  CreateOIDCIdentity: !And
    - !Equals [!Ref UsesCustomIdentity, 'Yes']
    - !Equals [!Ref IdentityType, 'OIDC']
  RedirectForGoogleAndOIDC: !Or
    - !And
      - !Equals [!Ref UsesCustomIdentity, 'Yes']
      - !Equals [!Ref IdentityType, 'Google']
    - !And
      - !Equals [!Ref UsesCustomIdentity, 'Yes']
      - !Equals [!Ref IdentityType, 'OIDC']

Resources:
  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
      Policies:
        - PolicyName: AuthPerspectiveCognitoExecuteApiAndStorageBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectAcl
                Resource:
                  - Fn::Sub:
                      - arn:aws:s3:::${AmplifyStorageBucket}/private/${CognitoSub}/*
                      - AmplifyStorageBucket: !Ref AmplifyStorageBucket
                        CognitoSub: '${cognito-identity.amazonaws.com:sub}'
                  - Fn::Sub:
                      - arn:aws:s3:::${AmplifyStorageBucket}/protected/${CognitoSub}/*
                      - AmplifyStorageBucket: !Ref AmplifyStorageBucket
                        CognitoSub: '${cognito-identity.amazonaws.com:sub}'
                  - !Sub "arn:aws:s3:::${AmplifyStorageBucket}/public/*"
                Effect: Allow
              - Action: s3:PutObject
                Resource: !Sub "arn:aws:s3:::${AmplifyStorageBucket}/uploads/*"
                Effect: Allow
              - Action: s3:GetObject
                Resource: !Sub "arn:aws:s3:::${AmplifyStorageBucket}/protected/*"
                Effect: Allow
                Condition:
                  StringLike:
                    s3:prefix:
                      - "public/"
                      - "public/*"
                      - "protected/"
                      - "protected/*"
                      - "private/${cognito-identity.amazonaws.com:sub}/"
                      - "private/${cognito-identity.amazonaws.com:sub}/*"
              - Action: s3:ListBucket
                Resource: !Sub "arn:aws:s3:::${AmplifyStorageBucket}"
                Effect: "Allow"
    
  CognitoUserPoolDomain: 
    Type: AWS::Cognito::UserPoolDomain
    Condition: CreateSAMLResources
    Properties:
      Domain: !Ref CognitoDomain
      UserPoolId: !Ref WDCognitoUserPool

  IdentityPoolRoleMap:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthRole.Arn

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt WDCognitoUserPool.ProviderName
          ServerSideTokenCheck: true

  WDCognitoUserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: !Sub |
            <!DOCTYPE html><html><body style="font-family:sans-serif">
            <p>Thank you for your interest in Workload Discovery on AWS.</p>
            <p>You can login at <a href="${WebUiUrl}">${WebUiUrl}</a>.</p>
            <p>Your temporary login credentials are:</p><ul><li>Username: {username}</li><li>Password: {####}</li></ul></p>
            <p>For any issues or feedback, please create an <a href="https://github.com/awslabs/aws-perspective/issues">issue on GitHub</a>.</p>
            </body></html>
          EmailSubject: 'Welcome to Workload Discovery on AWS'
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  CognitoUserPoolAdmin:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      Username: admin
      DesiredDeliveryMediums:
        - EMAIL
      UserPoolId: !Ref WDCognitoUserPool
      UserAttributes:
        - Name: email
          Value: !Ref AdminUserEmailAddress

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref WDCognitoUserPool
      RefreshTokenValidity: 1
      AccessTokenValidity: 60
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - aws.cognito.signin.user.admin
        - email
        - openid
        - phone 
        - profile
      CallbackURLs: [!Ref CloudfrontDistributionURL]
      EnableTokenRevocation: true
      IdTokenValidity: 60
      LogoutURLs: [!Ref CloudfrontDistributionURL]
      SupportedIdentityProviders:
        Fn::If: [ CreateSAMLResources, [ Fn::If: [CreateGoogleIdentity, !GetAtt GoogleIdentityProvider.ProviderName, Fn::If: [CreateSAMLIdentity, !GetAtt SAMLIdentityProvider.ProviderName, !GetAtt OIDCIdentityProvider.ProviderName ]]], [ COGNITO ]]
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      PreventUserExistenceErrors: ENABLED

  IdentityProviderCrFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Not applicable
          - id: W92
            reason: Not applicable
    Type: AWS::Serverless::Function
    Properties:
      Handler: identity_provider.handler
      CodeUri:
        Bucket: !Ref DeploymentBucket
        Key: !Sub ${DeploymentBucketKey}/identity-provider.zip
      Runtime: !Ref PythonLambdaRuntime
      Layers:
        - !Ref BotoUtils
        - !Ref CustomResourceHelper
        - !Ref LambdaPowertoolsPythonLayer
      Description: Custom Lambda resource for creating Cognito identity provider
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:CreateIdentityProvider
                - cognito-idp:DeleteIdentityProvider
                - cognito-idp:UpdateIdentityProvider
              Resource: !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${WDCognitoUserPool}
        - !If
          - CreateOIDCIdentity
          - Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref OIDCClientSecretArn
          - !Ref AWS::NoValue
        - !If
          - CreateGoogleIdentity
          - Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref GoogleClientSecretArn
          - !Ref AWS::NoValue

  OIDCIdentityProvider:
    Type: Custom::UserPoolIdentityProvider
    Condition: CreateOIDCIdentity
    Properties:
      ServiceToken: !GetAtt IdentityProviderCrFunction.Arn
      UserPoolId: !Ref WDCognitoUserPool
      ProviderName: !Ref ProviderName
      ProviderType: OIDC
      ClientSecretArn: !Ref OIDCClientSecretArn
      ProviderDetails:
        client_id: !Ref OIDCClientId
        attributes_request_method: !Ref OIDCAttributeRequestMethod
        oidc_issuer: !Ref OIDCIssuerURL
        authorize_scopes: email profile openid
      AttributeMapping: !Ref AttributeMapping
      IdpIdentifiers:
        - IdpIdentifier

  GoogleIdentityProvider:
    Type: Custom::UserPoolIdentityProvider
    Condition: CreateGoogleIdentity
    Properties:
      ServiceToken: !GetAtt IdentityProviderCrFunction.Arn
      UserPoolId: !Ref WDCognitoUserPool
      ProviderName: !Ref ProviderName
      ProviderType: Google
      ClientSecretArn: !Ref GoogleClientSecretArn
      ProviderDetails:
        client_id: !Ref GoogleClientId
        authorize_scopes: profile email openid
      AttributeMapping: !Ref AttributeMapping

  SAMLIdentityProvider:
    Type: Custom::UserPoolIdentityProvider
    Condition: CreateSAMLIdentity
    Properties:
      ServiceToken: !GetAtt IdentityProviderCrFunction.Arn
      UserPoolId: !Ref WDCognitoUserPool
      ProviderName: !Ref ProviderName
      ProviderType: SAML
      ProviderDetails:
        MetadataURL: !Ref SAMLMetadataURL
      AttributeMapping: !Ref AttributeMapping
      IdpIdentifiers:
        - IdpIdentifier
  
Outputs:
  AuthPerspectiveRoleName:
    Value: !Ref CognitoAuthRole
  IdentityPoolId:
    Value: !Ref CognitoIdentityPool
  UserPoolId:
    Value: !Ref WDCognitoUserPool
  UserPoolDomain:
    Condition: CreateSAMLResources
    Value: !Ref CognitoUserPoolDomain
  UserPoolARN:
    Value: !GetAtt WDCognitoUserPool.Arn
  WebClientId:
    Value: !Ref UserPoolClient

  SAMLEntityId:
    Condition: CreateSAMLIdentity
    Value: !Sub urn:amazon:cognito:sp:${WDCognitoUserPool}

  SAMLReplyURL:
    Condition: CreateSAMLIdentity
    Value: !Sub https://${CognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/saml2/idpresponse

  RedirectURI:
    Condition: RedirectForGoogleAndOIDC
    Value: !Sub https://${CognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/oauth2/idpresponse

  GoogleJavascriptOrigin:
    Condition: CreateGoogleIdentity
    Value: !Sub https://${CognitoUserPoolDomain}.auth.${AWS::Region}.amazoncognito.com