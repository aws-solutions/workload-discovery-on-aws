AWSTemplateFormatVersion: 2010-09-09

Transform: AWS::Serverless-2016-10-31

Description: Workload Discovery on AWS Discovery Crawler Scheduled Task Stack

Parameters:
  AppName:
    Type: String

  ContainerPort:
    Type: Number
    Default: 80

  DiscoveryBucket:
    Type: String

  PrivateSubnet0:
    Description: Private Subnet
    Type: String

  PrivateSubnet1:
    Description: Private Subnet
    Type: String

  Cpu:
    Description: Cpu size
    Type: String

  Memory:
    Description: Memory size
    Type: String

  DiscoveryTaskCapacityProvider:
    Type: String

  DiscoveryTaskFrequency:
    Type: String

  ImageVersion:
    Description: Release version
    Type: String

  RetainedImageCount:
    Type: Number
    Default: 5

  DeploymentBucketName:
    Type: String
    Description: The bucket where the zip files containing the source code for the ECR cleanup lambda

  DeploymentBucketKey:
    Type: String
    Description: The key within the bucket that contains the source code zips

  Decorators:
    Type: String
    Description: Required library

  BotoUtils:
    Type: String
    Description: Required library

  CustomResourceHelper:
    Type: String
    Description: Required library

  LogLevel:
    Type: String
    Default: INFO
    AllowedValues:
      - CRITICAL
      - FATAL
      - ERROR
      - WARNING
      - INFO
      - DEBUG
      - NOTSET

  CrossAccountDiscovery:
    Type: String

  OrganizationUnitId:
    Type: String

  AppSyncApiUrl:
    Type: String

  AppSyncArn:
    Type: String
    Description: The AppSync GraphQl Arn

  ConfigurationAggregator:
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id

  VpcEndpointsSg:
    Type: String
    Default: ''

  PythonLambdaRuntime:
    Type: String

  CustomUserAgent:
    Type: String

Conditions:
  UseVpcEndpointsSg: !Not [!Equals [!Ref VpcEndpointsSg, '']]

Mappings:
  EcsTaskMap:
    MaxOldSpaceSize:
      '2048': 1500
      '4096': 3500
      '6144': 5600
      '8192': 7500
      '12288': 11600
      '16384': 15700
      '20480': 19800
      '24576': 24000
      '28672': 28100
      '32768': 32100
      '40960': 40300
      '49152': 48500
      '57344': 56600

Resources:
  PerspectiveContainerRepo:
    Type: AWS::ECR::Repository
    Properties:
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: !Sub
          - '{"rules":[{"rulePriority":1,"description":"Retained Image count: ${RetainedImageCount}","selection":{"tagStatus":"any","countType":"imageCountMoreThan","countNumber":${RetainedImageCount}},"action":{"type":"expire"}}]}'
          - { RetainedImageCount: !Ref RetainedImageCount }
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          Sid: AllowPull
          Effect: Allow
          Principal:
            AWS: !GetAtt EcsTaskExecutionRole.Arn
          Action:
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - ecr:BatchCheckLayerAvailability

  TaskSg:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F1000
            reason: Needs open egress for API as it is on the internet.
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Discovery Task
      VpcId: !Ref VpcId

  VpcEndpointsSgIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: UseVpcEndpointsSg
    Properties:
      Description: Ingress Security Group for ECR Vpc Endpoint
      FromPort: 443
      ToPort: 443
      GroupId: !Ref VpcEndpointsSg
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref TaskSg

  CleanupRepositoryFunction:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: 'Not applicable'
          - id: W92
            reason: 'Not applicable'
    Type: AWS::Serverless::Function
    Properties:
      Handler: cleanup_ecr.handler
      CodeUri:
        Bucket: !Ref DeploymentBucketName
        Key: !Sub ${DeploymentBucketKey}/cleanup-ecr.zip
      Runtime: !Ref PythonLambdaRuntime
      Layers:
        - !Ref Decorators
        - !Ref BotoUtils
        - !Ref CustomResourceHelper
      Description: Custom Lambda resource for deleting images in ECR on stack deletion
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - ecr:BatchDeleteImage
                - ecr:ListImages
              Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${PerspectiveContainerRepo}
      Environment:
        Variables:
          CustomUserAgent: !Ref CustomUserAgent

  CleanupECRRepository:
    Type: Custom::Setup
    Properties:
      ServiceToken: !GetAtt CleanupRepositoryFunction.Arn
      LogLevel: !Ref LogLevel
      Repository: !Ref PerspectiveContainerRepo

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName:
        Fn::Sub: ${AppName}-cluster
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  ClusterCPAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref Cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - Weight: 1
          CapacityProvider: FARGATE
        - Weight: 1
          CapacityProvider: FARGATE_SPOT

  EcsTaskExecutionRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: The ecr:GetAuthorizationToken API used in this role does not allow resource level permissions.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EcsTaskExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource:
                  - !Sub arn:${AWS::Partition}:ecr:${AWS::Region}:${AWS::AccountId}:repository/*
      Path: /

  PerspectiveDiscoveryTaskRole:
    Type: AWS::IAM::Role
    Metadata:
      wildcard_resources:
        - 'We have locked down resources as much as we can.
          The nature of the role requires read-only access
          to many services in order to discover what is in the account'
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: 'Role is with ECS task. It defines the roles that are to be assumed and also read-only actions required for Task Definition'
          - id: W11
            reason: 'The config:*, organizations:DescribeOrganization, organizations:List* and ec2:DescribeRegions APIs used in this role do not allow resource level permissions.'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: '2012-10-17'
      Policies:
        - PolicyName: perspective-discovery-cluster
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeTasks
                  - ecs:ListTasks
                Resource: '*'
                Condition:
                  ArnEquals:
                    'ecs:cluster': !GetAtt Cluster.Arn
        - PolicyName: assume-perspective-remote-discovery-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Sub arn:aws:iam::*:role/WorkloadDiscoveryRole-${AWS::AccountId}
        - PolicyName: list-account-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - organizations:DescribeOrganization
                  - organizations:ListAccounts
                  - organizations:ListAccountsForParent
                  - organizations:ListOrganizationalUnitsForParent
                  - organizations:ListRoots
                Resource: '*'
        - PolicyName: ec2-policies
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeRegions
                Resource: '*'
        - PolicyName: config-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - config:DescribeConfigurationAggregators
                  - config:BatchGetAggregateResourceConfig
                  - config:ListAggregateDiscoveredResources
                  - config:SelectAggregateResourceConfig
                Resource: '*'
        - PolicyName: access-appsync
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - appsync:GraphQL
                Resource: !Sub ${AppSyncArn}/*

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AppName}-taskgroup
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref Cpu
      Memory: !Ref Memory
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !Ref PerspectiveDiscoveryTaskRole
      ContainerDefinitions:
        - Name:
            Ref: AppName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${PerspectiveContainerRepo}:${ImageVersion}
          User: discovery:discovery
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: CLUSTER
              Value: !Ref Cluster
            - Name: NODE_OPTIONS
              Value: !Sub
                - --max-old-space-size=${MaxOldSpaceSize}
                - MaxOldSpaceSize: !FindInMap [EcsTaskMap, MaxOldSpaceSize, !Ref Memory]
            - Name: CROSS_ACCOUNT_DISCOVERY
              Value: !Ref CrossAccountDiscovery
            - Name: ORGANIZATION_UNIT_ID
              Value: !Ref OrganizationUnitId
            - Name: GRAPHQL_API_URL
              Value: !Ref AppSyncApiUrl
            - Name: CONFIG_AGGREGATOR
              Value: !Ref ConfigurationAggregator
            - Name: LOG_LEVEL
              Value: !Ref LogLevel
            - Name: CUSTOM_USER_AGENT
              Value: !Ref CustomUserAgent
          ReadonlyRootFilesystem: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  LogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: 'Not applicable'
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /ecs/${AppName}-task
      RetentionInDays: 30

  ClusterLifecycleEventsLogGroup:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: 'Not applicable'
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/events/ecs/containerinsights/${Cluster}/performance
      RetentionInDays: 30

  CaptureEcsTaskLifeCycleEvents:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub Capture task events from ${Cluster}
      EventPattern:
        source:
          - aws.ecs
        detail-type:
          - ECS Task State Change
      Targets:
        - Arn: !GetAtt ClusterLifecycleEventsLogGroup.Arn
          Id: ClusterLifecycleEventsLogGroup

  EcsLifecycleEventBridgeToCwLogsPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: EcsLifecycleEventBridgeToCwLogsPolicy
      PolicyDocument:
        !Sub |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "events.amazonaws.com",
                    "delivery.logs.amazonaws.com"
                  ]
                },
                "Action": [
                  "logs:PutLogEvents",
                  "logs:CreateLogStream"
                ],
                "Resource": "${ClusterLifecycleEventsLogGroup.Arn}"
              }
            ]
          }

  DiscoveryTaskRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
            - Effect: Allow
              Principal:
                Service:
                  - events.amazonaws.com
              Action: sts:AssumeRole
      Policies:
        - PolicyName: EcsEventsPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecs:RunTask
                Resource:
                  - !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/workload-discovery-taskgroup:*
                Condition:
                  ArnEquals:
                    'ecs:cluster': !GetAtt Cluster.Arn
              - Effect: Allow
                Action: iam:PassRole
                Resource:
                  - !GetAtt EcsTaskExecutionRole.Arn
                Condition:
                  StringLike:
                    iam:PassedToService: ecs-tasks.amazonaws.com

  DiscoveryTaskRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Workload Discovery on AWS Discovery service
      ScheduleExpression: !Ref DiscoveryTaskFrequency
      State: ENABLED
      Targets:
        - Arn: !GetAtt Cluster.Arn
          RoleArn: !GetAtt DiscoveryTaskRuleRole.Arn
          Id: apiScheduledTask
          EcsParameters:
            TaskDefinitionArn: !Ref TaskDefinition
            CapacityProviderStrategy:
              - CapacityProvider: !Ref DiscoveryTaskCapacityProvider
                Base: 1
                Weight: 1
            PlatformVersion: LATEST
            NetworkConfiguration:
              AwsVpcConfiguration:
                SecurityGroups:
                  - !Ref TaskSg
                Subnets:
                  - !Ref PrivateSubnet0
                  - !Ref PrivateSubnet1

Outputs:

  ClusterArn:
    Description: WD Cluster Arn
    Value: !GetAtt Cluster.Arn

  TaskDef:
    Description: Task Name
    Value: !Ref TaskDefinition

  DiscoveryTaskLogGroup:
    Description: Log group for discovery process task
    Value: !Ref LogGroup

  ClusterLifecycleEventsLogGroup:
    Description: Log group for discovery process task
    Value: !Ref ClusterLifecycleEventsLogGroup

  EcsRoleDef:
    Description: ECS Role Name
    Value: !GetAtt EcsTaskExecutionRole.Arn

  ContainerRepo:
    Value: !Ref PerspectiveContainerRepo

  DiscoveryRoleArn:
    Value: !GetAtt PerspectiveDiscoveryTaskRole.Arn
